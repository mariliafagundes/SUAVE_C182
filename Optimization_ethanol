import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import minimize, Bounds

import SUAVE
from SUAVE.Core import Units, Data

from SUAVE.Methods.Propulsion import propeller_design
from SUAVE.Methods.Geometry.Two_Dimensional.Planform.wing_segmented_planform import wing_segmented_planform
from SUAVE.Plots.Performance import *
from SUAVE.Components import Lofted_Body_Segment
from SUAVE.Analyses.Weights import Weights_Transport

#from SUAVE.Input_Output.OpenVSP import write

# ----------------------------------------------------------------------
#   Sensitivity, Otimização e Plots
# ----------------------------------------------------------------------

def compute_range(x, vehicle, analyses):
    """
    Computa o alcance (R) para uma configuração x = [AR, taper, tc].
    """
    AR, taper, tc = x
    wing = vehicle.wings['main_wing']
    S = vehicle.reference_area
    span = np.sqrt(S * AR)
    chord_root = (2 * S) / (span * (1 + taper))
    chord_tip = taper * chord_root
    wing.spans.projected = span
    wing.aspect_ratio = AR
    wing.taper = taper
    wing.chords.root = chord_root
    wing.chords.tip = chord_tip
    wing.thickness_to_chord = tc
    SUAVE.Methods.Geometry.Two_Dimensional.Planform.wing_planform(wing)

    mission = mission_setup(analyses, vehicle)
    results = mission.evaluate()
    cruise = results.segments['cruise']
    L = -cruise.conditions.frames.wind.lift_force_vector[:,2]
    D = -cruise.conditions.frames.wind.drag_force_vector[:,0]
    L_D = np.mean(L/D)

    q = 1360.82
    eta_p = 0.8
    SFC = 0.925
    SFC_SI = (SFC * 0.453592 * 9.81) / (745.7 * 3600)
    W0_guess = 2831
    S_ft2 = S / Units.feet**2
    Nz = vehicle.envelope.limit_load
    tc_percent = tc * 100
    W_wing = 0.036 * (S_ft2**0.758) * (AR**0.6) * (q**0.006) * (taper**0.04) * (tc_percent**-0.3) * ((Nz * W0_guess)**0.49)
    W0 = W0_guess + W_wing
    W2 = W0 * 0.97 * 0.985
    W3 = W2 - 568.793
    W2_kg = W2 * 0.453592
    W3_kg = W3 * 0.453592
    R = eta_p * L_D / SFC_SI * np.log(W2_kg/W3_kg) / 1000
    return R


history = []

def objective_logged(x, vehicle, analyses):
    R = compute_range(x, vehicle, analyses)
    # Restrições
    W0 = 2831  # lb
    V_stall = np.sqrt((2 * (W0*0.453592*9.81)) / (1.225 * (vehicle.reference_area/Units.meter**2) * 1.5))
    V_stall_max = 31.4
    S = vehicle.reference_area
    chord_root_m = ((2 * S) / (np.sqrt(S*x[0])*(1 + x[1])))/Units.meter
    chord_tip_m = x[1]*chord_root_m
    c_med = (chord_root_m + chord_tip_m)/2
    V_asa_util = 0.6**3 * (S/Units.meter**2) * c_med * x[2]
    V_combustivel_m3 = 282/0.81/1000
    penalty = 0.0
    if V_stall > V_stall_max:
        penalty += 1e3 * (V_stall - V_stall_max)
    if V_asa_util < V_combustivel_m3:
        penalty += 1e3 * (V_combustivel_m3 - V_asa_util)
    
    f = -R + penalty
    history.append((x.copy(), R, penalty))
    return f


def optimize_range_slsqp(vehicle, analyses):
    global history
    history = []  # reseta antes de otimizar

    bounds = Bounds([8, 0.4, 0.08], [14, 1.0, 0.14])
    x0 = np.array([10.0, 0.6, 0.1])

    result = minimize(
        lambda x: objective_logged(x, vehicle, analyses),
        x0,
        method='SLSQP',
        bounds=bounds,
        options={'maxiter': 500, 'ftol': 1e-6, 'disp': True}
    )
    return result


def plot_sensitivity(vehicle, analyses, n_samples=200):
    bounds = np.array([[8,0.4,0.07], [14,1.0,0.14]])
    samples = np.random.uniform(bounds[0], bounds[1], size=(n_samples,3))
    valid = []
    vals = []

    for x in samples:
        W0 = 2831
        V_stall = np.sqrt((2 * (W0*0.453592*9.81)) / (1.225 * (vehicle.reference_area/Units.meter**2) * 1.5))
        V_stall_max = 31.4
        S = vehicle.reference_area
        chord_root_m = ((2 * S) / (np.sqrt(S*x[0]) * (1 + x[1]))) / Units.meter
        chord_tip_m = x[1] * chord_root_m
        c_med = (chord_root_m + chord_tip_m) / 2
        V_asa_util = 0.6**3 * (S/Units.meter**2) * c_med * x[2]
        V_combustivel_m3 = 282/0.81/1000
        if V_stall <= V_stall_max and V_asa_util >= V_combustivel_m3:
            valid.append(x)
            vals.append(compute_range(x, vehicle, analyses))

    valid = np.array(valid)
    vals = np.array(vals)

    hist_x = np.array([h[0] for h in history])
    hist_R = np.array([h[1] for h in history])

    configs = [
        ('Aspect Ratio', 'Range x Aspect Ratio', 'blue', 0),
        ('Taper', 'Range x Taper', 'green', 1),
        ('Thickness-to-chord', 'Range x Thickness-to-chord', 'red', 2),
    ]
    for nome_x, titulo, cor, idx in configs:
        plt.figure()
        if len(valid) > 0:
            plt.scatter(valid[:,idx], vals, color=cor, alpha=0.3, label="Sensibilidade")
        if len(hist_x) > 0:
            plt.scatter(hist_x[:,idx], hist_R, color="black", marker="x", label="Otimização")
        plt.xlabel(nome_x)
        plt.ylabel('Range (km)')
        plt.title(titulo)
        plt.grid(True)
        plt.legend()
        plt.show()


def vehicle_setup(): 
    # ------------------------------------------------------------------
    #   Initialize the Vehicle
    # ------------------------------------------------------------------        
    vehicle                                     = SUAVE.Vehicle()
    vehicle.tag                                 = 'Cessna_182'
                                                
    # ------------------------------------------------------------------
    #   Vehicle-level Properties
    # ------------------------------------------------------------------    

    Fuel_masss  = 282.    * Units.kg
    Payload     = 256.    * Units.kg
    Empty_original = 873 * Units.kg
    GTOW        =    Fuel_masss +  Payload + Empty_original 
    # GTOW        =    1411                   
    

    vehicle.mass_properties.max_takeoff               = GTOW
    vehicle.mass_properties.operating_empty           = Empty_original  
    vehicle.mass_properties.takeoff                   = GTOW                 
    vehicle.mass_properties.max_zero_fuel             = GTOW - Fuel_masss
    vehicle.mass_properties.cargo                     =  0.
    vehicle.mass_properties.landing                   = Empty_original + Payload  
    vehicle.mass_properties.payload                   = Payload
                                               
    # envelope properties                       
    vehicle.envelope.ultimate_load              = 5.7
    vehicle.envelope.limit_load                 = 3.8
                                                
    # basic parameters                          
    vehicle.reference_area                      = 174. * Units.feet**2      
    vehicle.passengers                          = 4

    # ------------------------------------------------------------------        
    #   Main Wing
    # ------------------------------------------------------------------        

    wing                                        = SUAVE.Components.Wings.Main_Wing()
    wing.tag                                    = 'main_wing'    
    wing.sweeps.quarter_chord                   = 0.0 * Units.deg
    #wing.thickness_to_chord                     = 0.12
    wing.thickness_to_chord                     = 0.0884
    #wing.areas.reference                        = 174. * Units.feet**2
    wing.areas.reference                        = 163. * Units.feet**2
    #wing.spans.projected                        = 36.  * Units.feet + 1. * Units.inches
    wing.spans.projected                        = 45.1388  * Units.feet
    wing.chords.root                            = 66. * Units.inches
    #wing.chords.tip                             = 45. * Units.inches
    wing.chords.tip                             = 26.4 * Units.inches
    wing.taper                                  = wing.chords.tip/wing.chords.root
    wing.aspect_ratio                           = wing.spans.projected**2. / wing.areas.reference
    wing.twists.root                            = 0.0 * Units.degrees
    wing.twists.tip                             = 0.0 * Units.degrees
    wing.origin                                 = [[80.* Units.inches,0,36.75* Units.inches]]
    wing.vertical                               = False
    wing.symmetric                              = True
    wing.high_lift                              = False
    wing.dynamic_pressure_ratio                 = 1.0 
      
    wing = SUAVE.Methods.Geometry.Two_Dimensional.Planform.wing_planform(wing) 

    # add to vehicle
    vehicle.append_component(wing)


    # ------------------------------------------------------------------        
    #  Horizontal Stabilizer
    # ------------------------------------------------------------------                                
    wing                                        = SUAVE.Components.Wings.Horizontal_Tail()
    wing.tag                                    = 'horizontal_stabilizer' 
    wing.sweeps.quarter_chord                   = 19.5 * Units.deg
    wing.thickness_to_chord                     = 0.12
    wing.spans.projected                        = 135.  * Units.inches
    wing.areas.reference                        = 5500  * Units.inches**2
    wing.chords.root                            = 55. * Units.inches
    wing.chords.tip                             = 28. * Units.inches
    wing.taper                                  = wing.chords.tip/wing.chords.root
    wing.aspect_ratio                           = (wing.spans.projected**2)/ wing.areas.reference
    wing.twists.root                            = 0.0 * Units.degrees
    wing.twists.tip                             = 0.0 * Units.degrees
    wing.origin                                 = [[253.* Units.inches,0,0]]
    wing.vertical                               = False
    wing.symmetric                              = True
    wing.high_lift                              = False 
    wing.dynamic_pressure_ratio                 = 0.9
    
    wing = SUAVE.Methods.Geometry.Two_Dimensional.Planform.wing_planform(wing) 
    
    vehicle.append_component(wing)


    # ------------------------------------------------------------------
    #   Vertical Stabilizer
    # ------------------------------------------------------------------
    wing                                        = SUAVE.Components.Wings.Vertical_Tail()
    wing.tag                                    = 'vertical_stabilizer' 
    wing.sweeps.quarter_chord                   = 48. * Units.deg
    wing.thickness_to_chord                     = 0.12
    wing.areas.reference                        = 3500. * Units.inches**2
    wing.spans.projected                        = 56.   * Units.inches
    wing.chords.root                            = 64. * Units.inches
    wing.chords.tip                             = 30. * Units.inches
    wing.taper                                  = wing.chords.tip/wing.chords.root
    wing.aspect_ratio                           = wing.spans.projected**2. / wing.areas.reference
    wing.twists.root                            = 0.0 * Units.degrees
    wing.twists.tip                             = 0.0 * Units.degrees
    wing.origin                                 = [[240.* Units.inches,0,0]]
    wing.vertical                               = True 
    wing.symmetric                              = False
    wing.t_tail                                 = False 
    wing.dynamic_pressure_ratio                 = 1.0
    
    wing = SUAVE.Methods.Geometry.Two_Dimensional.Planform.wing_planform(wing) 

    vehicle.append_component(wing)
    
    # ------------------------------------------------------------------
    #   Strut
    # ------------------------------------------------------------------

    wing                                        = SUAVE.Components.Wings.Wing()
    wing.tag                                    = 'strut' 
    wing.sweeps.quarter_chord                   = 0. * Units.deg
    wing.thickness_to_chord                     = 0.4
    wing.areas.reference                        = 660. * Units.inches**2
    wing.spans.projected                        = 200.   * Units.inches
    wing.chords.root                            = 6. * Units.inches
    wing.chords.tip                             = 6. * Units.inches
    wing.chords.mean_aerodynamic                = 6. * Units.inches 
    wing.taper                                  = wing.chords.tip/wing.chords.root
    wing.aspect_ratio                           = wing.spans.projected**2. / wing.areas.reference
    wing.twists.root                            = 0.0 * Units.degrees
    wing.twists.tip                             = 0.0 * Units.degrees
    wing.origin                                 = [[80.* Units.inches,20.* Units.inches,-17.* Units.inches]]
    wing.dihedral                               = 30.0 * Units.degrees
    wing.vertical                               = False
    wing.symmetric                              = True
    wing.t_tail                                 = False 
    wing.dynamic_pressure_ratio                 = 1.0

    # add to vehicle
    vehicle.append_component(wing)
    


    # ------------------------------------------------------------------
    #  Fuselage
    # ------------------------------------------------------------------

    fuselage                                    = SUAVE.Components.Fuselages.Fuselage()
    fuselage.tag                                = 'fuselage'
    fuselage.number_coach_seats                 = 4.       
    fuselage.tag                                = 'fuselage'    
    fuselage.differential_pressure              = 8*Units.psi                   # Maximum differential pressure
    fuselage.width                              = 42.         * Units.inches     # Width of the fuselage
    fuselage.heights.maximum                    = 62. * Units.inches    # Height of the fuselage
    fuselage.lengths.total                      = 329.37 * Units.inches            # Length of the fuselage
    fuselage.lengths.empennage                  = 161. * Units.inches
    fuselage.lengths.cabin                      = 105. * Units.inches
    fuselage.lengths.structure                  = fuselage.lengths.total-fuselage.lengths.empennage 
    fuselage.mass_properties.volume             = .4*fuselage.lengths.total*(np.pi/4.)*(fuselage.heights.maximum**2.) #try this as approximation
    fuselage.mass_properties.internal_volume    = .3*fuselage.lengths.total*(np.pi/4.)*(fuselage.heights.maximum**2.)
    fuselage.areas.wetted                       = 30000. * Units.inches**2.
    fuselage.seats_abreast                      = 2.
    fuselage.fineness.nose                      = 1.6
    fuselage.fineness.tail                      = 2.
    fuselage.lengths.nose                       = 60.  * Units.inches
    fuselage.heights.at_quarter_length          = 62. * Units.inches
    fuselage.heights.at_three_quarters_length   = 62. * Units.inches
    fuselage.heights.at_wing_root_quarter_chord = 23. * Units.inches
    fuselage.areas.front_projected              = fuselage.width* fuselage.heights.maximum
    fuselage.effective_diameter                 = 50. * Units.inches
    fuselage.areas.side_projected = fuselage.effective_diameter*fuselage.lengths.total

    # add to vehicle
    vehicle.append_component(fuselage)
    
    # ------------------------------------------------------------------
    #   Landing gear
    # ------------------------------------------------------------------  
    landing_gear                                = SUAVE.Components.Landing_Gear.Landing_Gear()
    main_gear                                   = SUAVE.Components.Landing_Gear.Main_Landing_Gear()
    nose_gear                                   = SUAVE.Components.Landing_Gear.Nose_Landing_Gear()
    main_gear.strut_length                      = 12. * Units.inches 
    nose_gear.strut_length                      = 6. * Units.inches 
                                                
    landing_gear.main                           = main_gear
    landing_gear.nose                           = nose_gear
                                                
    # add to vehicle                             
    vehicle.landing_gear                        = landing_gear


    # ------------------------------------------------------------------
    #   Fuel
    # ------------------------------------------------------------------    
    # define fuel weight needed to size fuel system
    fuel                                        = SUAVE.Attributes.Propellants.Aviation_Gasoline()
    fuel.mass_properties                        = SUAVE.Components.Mass_Properties() 
    fuel.number_of_tanks                        = 1.
    fuel.origin                                 = wing.origin
    fuel.internal_volume                        = fuel.mass_properties.mass/fuel.density #all of the fuel volume is internal
    fuel.mass_properties.center_of_gravity      = wing.mass_properties.center_of_gravity
    fuel.mass_properties.mass                   = 621 *Units.lbs
    vehicle.fuel                                = fuel

    # ------------------------------------------------------------------
    #   Piston Propeller Network
    # ------------------------------------------------------------------    
    
    # build network
    net                                         = SUAVE.Components.Energy.Networks.Internal_Combustion_Propeller()
    net.tag                                     = 'internal_combustion'
    net.number_of_engines                       = 1.
    net.nacelle_diameter                        = 42 * Units.inches
    net.engine_length                           = 0.01 * Units.inches
    net.areas                                   = Data()
    net.rated_speed                             = 2400. * Units.rpm
    net.rated_power                             = 245.  * Units.hp
    net.areas.wetted                            = 0.01
    # net = propeller_design(net)
    
    # Component 2 the PROPELLER
    # Design the Propeller
    prop = SUAVE.Components.Energy.Converters.Propeller() 


    prop.number_blades       = 3.0
    prop.freestream_velocity = 135.*Units['mph']    
    prop.angular_velocity    = 1300.  * Units.rpm 
    prop.tip_radius          = 82./2. * Units.inches
    prop.hub_radius          = 8.     * Units.inches
    prop.design_Cl           = 0.8
    prop.design_altitude     = 12000. * Units.feet
    prop.design_thrust       = 800.  
    prop.origin              = [[2.,2.5,0.784]]  #  prop influence               
    prop.symmetry            = True
    prop                     = propeller_design(prop)    
    net.propeller            = prop    

                                   
    # Component 1 the engine                    
    net.engine                                  = SUAVE.Components.Energy.Converters.Internal_Combustion_Engine()
    net.engine.sea_level_power                  = 230. * Units.horsepower   
    net.engine.flat_rate_altitude               = 0.0
    net.engine.speed                            = 2400. * Units.rpm       
    net.engine.power_specific_fuel_consumption  = 0.925 #lb/h-hp 
    
    
    # add the network to the vehicle
    vehicle.append_component(net)  


    # ------------------------------------------------------------------
    #   Vehicle Definition Complete
    # ------------------------------------------------------------------

    return vehicle

# ----------------------------------------------------------------------
#   Define the Mission
# ----------------------------------------------------------------------

def mission_setup(analyses,vehicle):

    # ------------------------------------------------------------------
    #   Initialize the Mission
    # ------------------------------------------------------------------

    mission = SUAVE.Analyses.Mission.Sequential_Segments()
    mission.tag = 'the_mission'

    #airport
    airport = SUAVE.Attributes.Airports.Airport()
    airport.altitude   =  0.0  * Units.ft
    airport.delta_isa  =  0.0
    airport.atmosphere =  SUAVE.Analyses.Atmospheric.US_Standard_1976()

    mission.airport = airport    

    # unpack Segments module
    Segments = SUAVE.Analyses.Mission.Segments

    # base segment
    base_segment = Segments.Segment()
    atmosphere=SUAVE.Attributes.Atmospheres.Earth.US_Standard_1976()
    planet = SUAVE.Attributes.Planets.Earth()
    
    #------------------------------------------------------------------
    #  First Climb Segment: Constant Speed, Constant Throttle
    #------------------------------------------------------------------

    segment = Segments.Climb.Constant_Speed_Constant_Rate()
    segment.tag = "climb_1"

    # connect vehicle configuration
    segment.analyses.extend( analyses )

    # define segment attributes
    segment.atmosphere     = atmosphere
    segment.planet         = planet

    segment.altitude_start = 0.0
    segment.altitude_end   = 800.0 * Units.ft
    segment.air_speed      = 70.0 * Units.knots
    segment.climb_rate = 6.0 *Units.knots
    delta_h = segment.altitude_end - segment.altitude_start
    distance_1 = 1/3281 * 1/1000 *(segment.air_speed * (delta_h/segment.climb_rate)) *Units.km
    # add to misison
    mission.append_segment(segment)
    
    
    #------------------------------------------------------------------
    #  Second Climb Segment: Constant Speed, Constant Throttle
    #------------------------------------------------------------------

    segment = Segments.Climb.Constant_Speed_Constant_Rate()
    segment.tag = "climb_2"

    # connect vehicle configuration
    segment.analyses.extend( analyses )

    # define segment attributes
    segment.atmosphere     = atmosphere
    segment.planet         = planet

    segment.altitude_start = 800.0 * Units.ft
    segment.altitude_end   = 3000. * Units.ft
    segment.air_speed      = 80.0 * Units.knots
    segment.climb_rate = 5.5 *Units.knots
    distance_2 = 1/3281 * 1/1000 *(segment.air_speed * (delta_h/segment.climb_rate)) *Units.km


    # add to misison
    mission.append_segment(segment)
    
    #------------------------------------------------------------------
    #  Third Climb Segment: Constant Speed, Constant Throttle
    #------------------------------------------------------------------

    segment = Segments.Climb.Constant_Speed_Constant_Rate()
    segment.tag = "climb_3"

    # connect vehicle configuration
    segment.analyses.extend( analyses )

    # define segment attributes
    segment.atmosphere     = atmosphere
    segment.planet         = planet

    segment.throttle       = 1.0
    segment.altitude_start = 3000.0 * Units.ft
    segment.altitude_end   = 10000.0 * Units.ft    
    segment.air_speed      = 100.0 * Units.knots
    segment.climb_rate = 4.0 *Units.knots
    distance_3 = 1/3281 * 1/1000 *(segment.air_speed * (delta_h/segment.climb_rate)) *Units.km
    #segment.climb_rate =  9.0 * Units.knots


    # add to misison
    mission.append_segment(segment)

    # ------------------------------------------------------------------    
    #   Cruise Segment: Constant Speed Constant Altitude
    # ------------------------------------------------------------------    

    segment = Segments.Cruise.Constant_Speed_Constant_Altitude(base_segment)
    segment.tag = "cruise"

    segment.analyses.extend( analyses )

    segment.altitude   = 10000. * Units.ft 
    segment.air_speed  = 130 *Units.knot   
    segment.distance   = 1045 * Units.km	
    segment.rpm = 2400 * Units.rpm
    distance_7 = (segment.distance) / 1000
    
    ones_row                                        = segment.state.ones_row   
    segment.state.numerics.number_control_points    = 16
    segment.state.unknowns.throttle                 = 1 * ones_row(1) 


    segment.process.iterate.conditions.stability    = SUAVE.Methods.skip
    segment.process.finalize.post_process.stability = SUAVE.Methods.skip 

    # add to mission
    mission.append_segment(segment)

    # ------------------------------------------------------------------
    #  First Descent Segment: Constant Speed, Constant Rate
    #------------------------------------------------------------------

    segment = Segments.Descent.Constant_Speed_Constant_Rate()
    segment.tag = "descent_1"

    # connect vehicle configuration
    segment.analyses.extend( analyses )

    # segment attributes
    segment.atmosphere   = atmosphere
    segment.planet       = planet
    segment.altitude_start = 10000.0 * Units.ft
    segment.altitude_end = 4000.  * Units.ft
    segment.air_speed    = 100.0 * Units.knots
    segment.descent_rate =  4.0 *Units.knots
    distance_4 = 1/3281 * 1/1000 *(segment.air_speed * (delta_h/segment.descent_rate)) *Units.km

    
    # add to mission
    mission.append_segment(segment)
    
    
    #------------------------------------------------------------------
    #  Second Descent Segment: Constant Speed, Constant Rate
    #------------------------------------------------------------------

    segment = Segments.Descent.Constant_Speed_Constant_Rate()
    segment.tag = "descent_2"

    # connect vehicle configuration
    segment.analyses.extend( analyses )

    # segment attributes
    segment.atmosphere   = atmosphere
    segment.planet       = planet
    segment.altitude_start = 4000.0 * Units.ft
    segment.altitude_end = 1000.  * Units.ft
    segment.air_speed    = 90.0 * Units.knots
    segment.descent_rate =  5.0 *Units.knots
    distance_5 = 1/3281 * 1/1000 *(segment.air_speed * (delta_h/segment.descent_rate)) *Units.km

    # add to mission
    mission.append_segment(segment)
    
    
    #------------------------------------------------------------------
    #  Third Descent Segment: Constant Speed, Constant Rate
    #------------------------------------------------------------------

    segment = Segments.Descent.Constant_Speed_Constant_Rate()
    segment.tag = "descent_3"

    # connect vehicle configuration
    segment.analyses.extend( analyses )

    # segment attributes
    segment.atmosphere   = atmosphere
    segment.planet       = planet
    segment.altitude_start = 1000.0 * Units.ft
    segment.altitude_end = 0.  * Units.ft
    segment.air_speed    = 80.0 * Units.knots
    segment.descent_rate =  5.2 *Units.knots
    distance_6 = 1/3281 * 1/1000 * (segment.air_speed * (delta_h/segment.descent_rate)) *Units.km

    # add to mission
    mission.append_segment(segment)

    range = distance_1 + distance_2 + distance_3 + distance_4 + distance_5 + distance_6 + distance_7
    #print(range)

    return mission


def base_analysis(vehicle):

    # ------------------------------------------------------------------
    #   Initialize the Analyses
    # ------------------------------------------------------------------     
    analyses = SUAVE.Analyses.Vehicle()

    ## ------------------------------------------------------------------
    ##  Basic Geometry Relations
    sizing = SUAVE.Analyses.Sizing.Sizing()
    sizing.features.vehicle = vehicle
    analyses.append(sizing)

    # ------------------------------------------------------------------
    #  Weights
    weights = SUAVE.Analyses.Weights.Weights_Transport()
    weights.vehicle = vehicle
    analyses.append(weights)

    # ------------------------------------------------------------------
    #  Aerodynamics Analysis
    
    # Calculate extra drag from landing gear:
    
    main_wheel_width  = 4. * Units.inches
    main_wheel_height = 12. * Units.inches
    nose_gear_height  = 10. * Units.inches
    nose_gear_width   = 4. * Units.inches
    
    total_wheel       = 2*main_wheel_width*main_wheel_height + nose_gear_width*nose_gear_height
    
    main_gear_strut_height = 2. * Units.inches
    main_gear_strut_length = 24. * Units.inches
    nose_gear_strut_height = 12. * Units.inches
    nose_gear_strut_width  = 2. * Units.inches
    
    total_strut = 2*main_gear_strut_height*main_gear_strut_length + nose_gear_strut_height*nose_gear_strut_width
    
    # total drag increment area
    drag_area = 1.4*( total_wheel + total_strut)
    
    
    aerodynamics = SUAVE.Analyses.Aerodynamics.Fidelity_Zero() 
    aerodynamics.geometry                            = vehicle
    aerodynamics.settings.drag_coefficient_increment = 1.0*drag_area/vehicle.reference_area
    analyses.append(aerodynamics)

    # ------------------------------------------------------------------
    #  Energy
    energy= SUAVE.Analyses.Energy.Energy()
    energy.network = vehicle.propulsors
    analyses.append(energy)

    # ------------------------------------------------------------------
    #  Planet Analysis
    planet = SUAVE.Analyses.Planets.Planet()
    analyses.append(planet)

    # ------------------------------------------------------------------
    #  Atmosphere Analysis
    atmosphere = SUAVE.Analyses.Atmospheric.US_Standard_1976()
    atmosphere.features.planet = planet.features
    analyses.append(atmosphere)   

    # done!
    return analyses


# ----------------------------------------------------------------------
#   Plot Mission
# ----------------------------------------------------------------------

def plot_mission(results,line_style='bo-'):
    
    # Plot Flight Conditions 
    #plot_flight_conditions(results, line_style)

    # Plot Fuel Use
    #plot_fuel_use(results, line_style)
    
    # Plot Aerodynamic Forces 
    #plot_aerodynamic_forces(results, line_style)

    # Plot Aerodynamic Coefficients 
    #plot_aerodynamic_coefficients(results, line_style)
    
    # Drag Components
    #plot_drag_components(results, line_style)
    
    # Plot Altitude, sfc, vehicle weight 
    #plot_altitude_sfc_weight(results, line_style)
    
    # Plot Velocities 
    #plot_aircraft_velocities(results, line_style)  

    return

def main():
    vehicle = vehicle_setup()
    analyses = base_analysis(vehicle)
    analyses.finalize()

    result = optimize_range_slsqp(vehicle, analyses)
    best = result.x
    print("=== Melhor configuração encontrada: ===")
    print(f"AR: {best[0]:.3f}, Taper: {best[1]:.3f}, tc: {best[2]:.3f}")
    print(f"Alcance estimado: {-objective_logged(best, vehicle, analyses):.2f} km")

    plot_sensitivity(vehicle, analyses, n_samples=200)

if __name__ == '__main__':
    main()



